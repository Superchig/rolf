name: macOS build

# Controls when the workflow will run
on:
  pull_request:
    branches: [ main ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  build:
    # The type of runner that the job will run on
    runs-on: macos-11

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
      
      - name: Restore Rust cache
        uses: Swatinem/rust-cache@v1
        
      - name: Install Rust (ARM)
        run: |
          rustup target add aarch64-apple-darwin
      
      - name: Make a macOS 11 build
        run: cargo build --target aarch64-apple-darwin --release --locked
      
      # https://localazy.com/blog/how-to-automatically-sign-macos-apps-using-github-actions
      # https://artyom.dev/notarizing-go-binaries-for-macos.html
      # https://www.andrewhoefling.com/Blog/Post/how-to-develop-ios-without-a-mac
      # - name: Codesign executable
      #   env: 
      #     MACOS_CERTIFICATE: ${{ secrets.APPLE_DEVELOPER_CERTIFICATE_BASE64 }}
      #     MACOS_CERTIFICATE_PWD: ${{ secrets.APPLE_DEVELOPER_CERTIFICATE_PASSWORD }}
      #   run: |
      #     echo "$MACOS_CERTIFICATE" | base64 --decode > certificate.p12
      #     security create-keychain -p "$MACOS_CERTIFICATE_PWD" build.keychain
      #     security default-keychain -s build.keychain
      #     security unlock-keychain -p "$MACOS_CERTIFICATE_PWD" build.keychain
      #     security import certificate.p12 -k build.keychain -P "$MACOS_CERTIFICATE_PWD" -T /usr/bin/codesign
      #     # Show identity info
      #     security find-identity -v
      #     security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "$MACOS_CERTIFICATE_PWD" build.keychain
      #     /usr/bin/codesign --force -s "Developer ID Application: Christopher Chang (G285BB69RP)" target/release/rolf -v
      
      # - name: Notarize executable
      #   env: 
      #     AC_PASSWORD: ${{ secrets.AC_PASSWORD }}
      #     AC_USERNAME: ${{ secrets.AC_USERNAME }}
      #   run: |
      #     xcrun altool --store-password-in-keychain-item altool -u "$AC_USERNAME" -p "$AC_PASSWORD"
      #     xcrun altool --notarize-app --primary-bundle-id "com.github.superchig.rolf" --username "$AC_USERNAME" --password "@keychain:altool" --file target/release/rolf
      
      # - name: Create artifact
      #   run: |
      #     zip macos-build.zip target/release/rolf LICENSE
      
      # - uses: actions/upload-artifact@v3
      #   with:
      #     name: my-artifact
      #     path: macos-build.zip
